{
	"info": {
		"_postman_id": "a2672908-d5ab-450c-8857-c1bc1daa15c4",
		"name": "Test Explore With Me - Additional feature",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "26927050"
	},
	"item": [
		{
			"name": "Получение всех событий, ожидающих публикации",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Код ответа должен быть 200, и содержать тело ответа в формате JSON\", function() {",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const target = pm.response.json();",
							"",
							"",
							"",
							"pm.test(\"Полученный список должен содержать 10 событий\", function() {",
							"    pm.expect(target.length).to.equal(10);",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [
					{
						"key": "Content-Type",
						"value": "application/json",
						"type": "text"
					}
				],
				"url": {
					"raw": "{{baseUrl}}/admin/events/pending",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"events",
						"pending"
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение двух неопубликованных событий",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Код ответа должен быть 200, и содержать тело ответа в формате JSON\", function() {",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Полученный список должен содержать 2 события\", function() {",
							"    pm.expect(target.length).equal(2);",
							"    pm.collectionVariables.set(\"firstEventId\", target[0].id);",
							"    pm.collectionVariables.set(\"secondEventId\", target[1].id);",
							"    pm.collectionVariables.set(\"firstUser\", target[0].initiator.id);",
							"    pm.collectionVariables.set(\"secondUser\", target[1].initiator.id);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/admin/events/pending?from=0&size=2",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"events",
						"pending"
					],
					"query": [
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "2"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Публикуем первое неопубликованное событие",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Код ответа должен быть 200, и содержать тело ответа в формате JSON\", function() {",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Статус события должен поменяться на PUBLISHED\", function() {",
							"    pm.expect(target.id).equal(pm.collectionVariables.get(\"firstEventId\"));",
							"    pm.expect(target.state).equal(\"PUBLISHED\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"stateAction\": \"PUBLISH_EVENT\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/events/{{firstEventId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"events",
						"{{firstEventId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Отклоняем второе неопубликованное событие",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Код ответа должен быть 200, и содержать тело ответа в формате JSON\", function() {",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Статус события должен поменяться на CANCELED и содержать коммент админа\", function() {",
							"    pm.expect(target.id).equal(pm.collectionVariables.get(\"secondEventId\"));",
							"    pm.expect(target.state).equal(\"CANCELED\");",
							"    pm.expect(target.adminComment).equal(\"Это какая-то дичь!\");",
							"",
							"    ",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "{\"stateAction\": \"REJECT_EVENT\", \"adminComment\" : \"Это какая-то дичь!\"}",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/events/{{secondEventId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"events",
						"{{secondEventId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение пользователем своего события по Id. В ответе есть комментарий администратора",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Код ответа должен быть 200, и содержать тело ответа в формате JSON\", function() {",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Полученный список должен содержать 10 событий\", function() {",
							"    pm.expect(target.id).to.equal(pm.collectionVariables.get(\"secondEventId\"));",
							"    pm.expect(target.initiator.id).to.equal(pm.collectionVariables.get(\"secondUser\"));",
							"    pm.expect(target.adminComment).to.equal(\"Это какая-то дичь!\");",
							"});",
							"",
							"",
							""
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/users/{{secondUser}}/events/{{secondEventId}}",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"users",
						"{{secondUser}}",
						"events",
						"{{secondEventId}}"
					]
				}
			},
			"response": []
		},
		{
			"name": "Получение неопубликованных событий. Для последующего batchUpdate",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Код ответа должен быть 200, и содержать тело ответа в формате JSON\", function() {",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Полученный список должен содержать 3 события\", function() {",
							"    pm.expect(target.length).equal(3);",
							"    pm.collectionVariables.set(\"firstEventId\", target[0].id);",
							"    pm.collectionVariables.set(\"secondEventId\", target[1].id);",
							"    pm.collectionVariables.set(\"firdEventId\", target[2].id);",
							"    pm.collectionVariables.set(\"firstUser\", target[0].initiator.id);",
							"    pm.collectionVariables.set(\"secondUser\", target[1].initiator.id);",
							"    pm.collectionVariables.set(\"firdUser\", target[2].initiator.id);",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "GET",
				"header": [],
				"url": {
					"raw": "{{baseUrl}}/admin/events/pending?from=0&size=3",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"events",
						"pending"
					],
					"query": [
						{
							"key": "from",
							"value": "0"
						},
						{
							"key": "size",
							"value": "3"
						}
					]
				}
			},
			"response": []
		},
		{
			"name": "Массовое изменение статуса событий с добавлением комментария администратора",
			"event": [
				{
					"listen": "test",
					"script": {
						"exec": [
							"pm.test(\"Код ответа должен быть 200, и содержать тело ответа в формате JSON\", function() {",
							"    pm.response.to.be.ok;",
							"    pm.response.to.be.withBody;",
							"    pm.response.to.be.json;",
							"});",
							"",
							"const target = pm.response.json();",
							"",
							"pm.test(\"Полученный список должен содержать 3 события\", function() {",
							"    pm.expect(target.publishedEvents.length).equal(2);",
							"    pm.expect(target.rejectedEvents.length).equal(1);",
							"});",
							"",
							"pm.test(\"Отклоненное событие должно содержать комментарий администратора\", function() {",
							"    pm.expect(target.rejectedEvents[0].id).equal(pm.collectionVariables.get(\"firdEventId\"));",
							"    pm.expect(target.rejectedEvents[0].adminComment).equal(\"И это какая-то дичь!\");",
							"});"
						],
						"type": "text/javascript"
					}
				}
			],
			"request": {
				"method": "PATCH",
				"header": [],
				"body": {
					"mode": "raw",
					"raw": "[{\"eventId\": {{firstEventId}}, \"stateAction\" : \"PUBLISH_EVENT\"},  {\"eventId\": {{secondEventId}}, \"stateAction\" : \"PUBLISH_EVENT\"}, {\"eventId\": {{firdEventId}}, \"stateAction\" : \"REJECT_EVENT\", \"adminComment\": \"И это какая-то дичь!\"}]",
					"options": {
						"raw": {
							"language": "json"
						}
					}
				},
				"url": {
					"raw": "{{baseUrl}}/admin/events/batch-update",
					"host": [
						"{{baseUrl}}"
					],
					"path": [
						"admin",
						"events",
						"batch-update"
					]
				}
			},
			"response": []
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					"API = class {",
					"    constructor(postman, verbose = false, baseUrl = \"http://localhost:8080\") {",
					"        this.baseUrl = baseUrl;",
					"        this.pm = postman;",
					"        this._verbose = verbose;",
					"    }",
					"",
					"    async addUser(user, verbose=null) {",
					"        return this.post(\"/admin/users\", user, \"Ошибка при добавлении нового пользователя: \", verbose);",
					"    }",
					"",
					"    async addCategory(category, verbose=null) {",
					"        return this.post(\"/admin/categories\", category, \"Ошибка при добавлении новой категории: \", verbose);",
					"    }",
					"",
					"    async addEvent(userId, event, verbose=null) {",
					"        return this.post(\"/users/\" + userId + \"/events\", event, \"Ошибка при добавлении нового события: \", verbose);",
					"    }",
					"",
					"    async addCompilation(compilation, verbose=null) {",
					"        return this.post(\"/admin/compilations\", compilation, \"Ошибка при добавлении новой подборки: \", verbose);",
					"    }",
					"",
					"    async publishParticipationRequest(eventId, userId, verbose=null) {",
					"        return this.post('/users/' + userId + '/requests?eventId=' + eventId, null, \"Ошибка при добавлении нового запроса на участие в событии\", verbose);",
					"    }",
					"",
					"    async publishEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"PUBLISH_EVENT\"}, \"Ошибка при публикации события\", verbose);",
					"    }",
					"    ",
					"    async rejectEvent(eventId, verbose=null) {",
					"        return this.patch('/admin/events/' + eventId, {stateAction: \"REJECT_EVENT\"}, \"Ошибка при отмене события\", verbose);",
					"    }",
					"",
					"    async acceptParticipationRequest(eventId, userId, reqId, verbose=null) {",
					"        return this.patch('/users/' + userId + '/events/' + eventId + '/requests/', {requestIds:[reqId], status: \"CONFIRMED\"}, \"Ошибка при принятии заявки на участие в событии\", verbose);",
					"    }",
					"",
					"    async findCategory(catId, verbose=null) {",
					"        return this.get('/categories/' + catId, null, \"Ошибка при поиске категории по id\", verbose);",
					"    }",
					"",
					"    async findCompilation(compId, verbose=null) {",
					"        return this.get('/compilations/' + compId, null, \"Ошибка при поиске подборки по id\", verbose);",
					"    }",
					"",
					"    async findEvent(eventId, verbose=null) {",
					"        return this.get('/events/' + eventId, null, \"Ошибка при поиске события по id\", verbose);",
					"    }",
					"",
					"    async findUser(userId, verbose=null) {",
					"        return this.get('/admin/users?ids=' + userId, null, \"Ошибка при поиске пользователя по id\", verbose);",
					"    }",
					"",
					"    async post(path, body, errorText = \"Ошибка при выполнении post-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"POST\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async patch(path, body = null, errorText = \"Ошибка при выполнении patch-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"PATCH\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async get(path, body = null, errorText = \"Ошибка при выполнении get-запроса: \", verbose=null) {",
					"        return this.sendRequest(\"GET\", path, body, errorText, verbose);",
					"    }",
					"",
					"    async sendRequest(method, path, body=null, errorText = \"Ошибка при выполнении запроса: \", verbose=null) {",
					"        return new Promise((resolve, reject) => {",
					"            verbose = verbose == null ? this._verbose : verbose;",
					"",
					"            const request = {",
					"                url: this.baseUrl + path,",
					"                method: method,",
					"                body: body == null ? \"\" : JSON.stringify(body),",
					"                header: { \"Content-Type\": \"application/json\" },",
					"            };",
					"",
					"            if(verbose) {",
					"                console.log(\"Отправляю запрос: \", request);",
					"            }",
					"",
					"            try {",
					"                this.pm.sendRequest(request, (error, response) => {",
					"                    if(error || (response.code >= 400 && response.code <= 599)) {",
					"                        let err = error ? error : JSON.stringify(response.json());",
					"                        console.error(\"При выполнении запроса к серверу возникла ошика.\\n\", err,",
					"                             \"\\nДля отладки проблемы повторите такой же запрос к вашей программе \" + ",
					"                             \"на локальном компьютере. Данные запроса:\\n\", JSON.stringify(request));",
					"",
					"                        reject(new Error(errorText + err));",
					"                    }",
					"",
					"                    if(verbose) {",
					"                        console.log(\"Результат обработки запроса: код состояния - \", response.code, \", тело: \", response.json());",
					"                    }",
					"",
					"                    resolve(response.json());",
					"                });",
					"            } catch(err) {",
					"                if(verbose) {",
					"                    console.error(errorText, err);",
					"                }",
					"                return Promise.reject(err);",
					"            }",
					"        });",
					"    }",
					"};",
					"",
					"RandomUtils = class {",
					"    constructor() {}",
					"",
					"    getUser() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomFullName}}'),",
					"            email: pm.variables.replaceIn('{{$randomEmail}}')",
					"        };",
					"    }",
					"",
					"    getCategory() {",
					"        return {",
					"            name: pm.variables.replaceIn('{{$randomWord}}') + Math.floor(Math.random() * 100).toString()",
					"        };",
					"    }",
					"",
					"    getEvent(categoryId) {",
					"        return {",
					"            annotation: pm.variables.replaceIn('{{$randomLoremParagraph}}'),",
					"            category: categoryId,",
					"            description: pm.variables.replaceIn('{{$randomLoremParagraphs}}'),",
					"            eventDate: this.getFutureDateTime(),",
					"            location: {",
					"                lat: parseFloat(pm.variables.replaceIn('{{$randomLatitude}}')),",
					"                lon: parseFloat(pm.variables.replaceIn('{{$randomLongitude}}')),",
					"            },",
					"            paid: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            participantLimit: pm.variables.replaceIn('{{$randomInt}}'),",
					"            requestModeration: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}'),",
					"        }",
					"    }",
					"",
					"    getCompilation(...eventIds) {",
					"        return {",
					"            title: pm.variables.replaceIn('{{$randomLoremSentence}}').slice(0, 50),",
					"            pinned: pm.variables.replaceIn('{{$randomBoolean}}'),",
					"            events: eventIds",
					"        };",
					"    }",
					"",
					"",
					"    getFutureDateTime(hourShift = 5, minuteShift=0, yearShift=0) {",
					"        let moment = require('moment');",
					"",
					"        let m = moment();",
					"        m.add(hourShift, 'hour');",
					"        m.add(minuteShift, 'minute');",
					"        m.add(yearShift, 'year');",
					"",
					"        return m.format('YYYY-MM-DD HH:mm:ss');",
					"    }",
					"",
					"    getWord(length = 1) {",
					"        let result = '';",
					"        const characters = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';",
					"        const charactersLength = characters.length;",
					"        let counter = 0;",
					"        while (counter < length) {",
					"            result += characters.charAt(Math.floor(Math.random() * charactersLength));",
					"            counter += 1;",
					"        }",
					"        return result;",
					"    }",
					"}"
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "baseUrl",
			"value": "http://localhost:8080",
			"type": "string"
		},
		{
			"key": "firstEventId",
			"value": "",
			"type": "string"
		},
		{
			"key": "secondEventId",
			"value": "",
			"type": "string"
		},
		{
			"key": "firstUser",
			"value": "",
			"type": "string"
		},
		{
			"key": "secondUser",
			"value": "",
			"type": "string"
		},
		{
			"key": "firdEventId",
			"value": "",
			"type": "string"
		},
		{
			"key": "firdUser",
			"value": "",
			"type": "string"
		}
	]
}